# -*- coding: utf-8 -*-
"""FashionMNISTfaile_d.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WtINWhRpTSyalrSFKkq0suLuxCQGz52p
"""

#from google.colab import drive
#drive.mount('/content/drive')

import math
import time
import pandas as pd
import numpy as np
from cvxopt import matrix
from cvxopt import solvers
from scipy.spatial import distance
from itertools import combinations
import matplotlib.pyplot as plt
import multiprocessing as mp
from multiprocessing import Process
from multiprocessing import Pool
from sklearn.svm import LinearSVC
from sklearn.svm import SVC
from sklearn.model_selection import GridSearchCV
from joblib import Parallel, delayed

trainingData = pd.read_csv("drive/My Drive/ML/fashion_mnist/train.csv",
header = None)

testingData = pd.read_csv("drive/My Drive/ML/fashion_mnist/test.csv",
header = None)

valData = pd.read_csv("drive/My Drive/ML/fashion_mnist/val.csv",
header = None)

xvalidation = np.array(valData.iloc[:,:-1]/255)
yvalidationClass = np.array(valData.iloc[:,-1])

xtesting = np.array(testingData.iloc[:,:-1]/255)
ytestingClass = np.array(testingData.iloc[:,-1])

xtraining = np.array(trainingData.iloc[:,:-1]/255)
ytrainingClass = np.array(trainingData.iloc[:,-1])

def scikitL(c):
    clf = SVC(kernel="rbf",gamma=0.05,C=c)
    clf.fit(xtraining,ytrainingClass)
    prediction = clf.predict(xtesting)
    return clf.accuracy_score(ytestingClass, prediction)

C = [10e-5 , 10e-3 , 1, 5, 10]
parameters = {'C': C, 'gamma' : [0.05]}
clf = GridSearchCV(SVC(), parameters, n_jobs = -1, cv = 5)
clf.fit(xtraining, ytrainingClass)
mean_test_score = clf.cv_results_['mean_test_score']
std_test_score = clf.cv_results_['std_test_score']


result = Parallel(n_jobs=-1)(delayed(scikitL)(c) for c in [1e-5,1e-3,1,5,10])

X = np.log(np.array([1.0e-5, 1.0e-3, 1, 5, 10]))

Y1 = mean_test_score
Y2 = result

fig = plt.figure()
ax = plt.axes()

ax.plot(X, Y1, '-', color = 'orange', label = "Train scores")
ax.plot(X, Y1, 'X', color = 'orange', label = "Train scores")
ax.plot(X, Y2, '-', color = 'blue', label = "Train scores")
ax.plot(X, Y2, '.', color = 'blue', label = "Train scores")
ax.legend()
plt.ylabel('Scores%')
plt.ylabel('Differnt C-parameters Values')


plt.show()



















